// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


struct BoidData{
    float3 position;
	float4 rotation;

    float4 flockRot;
	float3 separationHeading;
	float3 flockCectre;

	float4x4 TRSMatrix;
};

RWStructuredBuffer<BoidData> boidBuffer;

int totalNum;
float senseRad;

[numthreads(64, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	BoidData boid = boidBuffer[id.x];
	
	float tempSpeed = 0;

	uint nearbyCount = 0;

	for(int i = 0; i < totalNum; i++){
		if(i != int(id.x)){
			BoidData tempBoid = boidBuffer[i];
			float distance = length(boid.position - tempBoid.position);
			if(distance < senseRad){
				boid.flockRot += tempBoid.rotation;
				boid.flockCectre += tempBoid.position;
				nearbyCount++;
				float seperationRatio = 1 / distance;
				boid.separationHeading += (boid.position - tempBoid.position) * seperationRatio;
			}
		}
	}
	
	if(nearbyCount > 0){
		boid.flockRot /= nearbyCount;
		boid.flockCectre /= nearbyCount;

	}

	boidBuffer[id.x] = boid;
}
